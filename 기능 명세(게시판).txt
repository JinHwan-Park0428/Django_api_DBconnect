1. 테이블 명
    skdevsec_board
2. 테이블 사용 컬럼
    1. bid (게시물 고유 번호)
    2. btitle (게시물 제목)
    3. btext (게시물 내용)
    4. bfile (게시물에 저장된 파일)
    5. bview (게시물 조회 수)
    6. bcomment (게시물 댓글 수)
    7. unickname (게시물 작성자 별명)
    8. bcreate_date (게시물 작성 일자)
    9. bcate (게시물 카테고리)
    10. b_lock (게시물 비밀글 여부)
3. 테이블에 귀속되는 기능들
    1. 게시판 출력
    2. 게시물 출력
    3. 게시물 등록
    4. 게시물 수정
    5. 게시물 삭제
    6. 파일 삭제
    7. 게시물 검색
4. 각 기능 별 상세 정보
    1. 게시판 출력
        1. 사용하기 위한 함수 주소
            http://10.60.15.210:8000/SkdevsecBoard/board_output
        2. 반드시 받아야 하는 변수
            1. bcate
            2. bpage
        3. 참조하는 테이블
            skdevsec_board
        4. 사용 되는 쿼리문
            SELECT COUNT(*) FROM skdevsec_board WHERE bcate='bcate'
            SELECT bid, btitle ,bfile, bview, bcomment, unickname, bcreate_date, b_lock FROM skdevsec_board where bcate='bcate' order by bid desc limit (bpage * 10 - 10), 10
        5. 실행되는 기능 및 에러 처리
            1. 전달 받은 변수를 이용하여 해당 카테고리의 게시판 갯수 및 페이지당 10개의 게시물 출력
            2. 데이터 처리에 문제 없을 경우 전달해야할 데이터 전송
            3. 에러가 발생하거나 데이터가 없으면 0 전달

    2. 게시물 출력
        1. 사용하기 위한 함수 주소
            http://10.60.15.210:8000/SkdevsecBoard/board_inside
        2. 반드시 받아야 하는 변수
            1. bid
        3. 참조하는 테이블
            skdevsec_board
        4. 사용 되는 쿼리문
            UPDATE skdevsec_board SET bview = bview+1 WHERE bid='bid'
            SELECT * FROM skdevsec_board WHERE bid='bid'
        5. 실행되는 기능 및 에러 처리
            1. 해당 함수가 호출 되면 우선 전달 받은 bid에 해당하는 게시물의 bview를 1 추가(조회수 상승)
            2. 이후 bid에 해당하는 전체 내용을 출력
            3. 데이터가 있으면 해당 데이터를 전송
            4. 데이터가 없거나 에러가 나면 0 전송

    3. 게시물 등록
        1. 사용하기 위한 함수 주소
            http://10.60.15.210:8000/SkdevsecBoard/board_upload
        2. 반드시 받아야 하는 변수
            1. btitle
            2. btext
            3. bfile
            4. bview
            5. bcomment
            6. unickname
            7. bcreate_date
            8. bcate
            9. b_lock
        3. 참조하는 테이블
            skdevsec_board
        4. 사용 되는 쿼리문
            INSERT INTO skdevsec_board(btitle, btext, bfile, bview, bcomment, unickname, bcreate_date, bcate, b_lock) VALUES('btitle', 'btext', 'bfile', 'bview', 'bcomment', 'unickname', 'bcreate_date', 'bcate', 'b_lock')
            file_serializer = SkdevsecBoardSerializer(data=new_data) (Django의 DB 저장 방법 중 하나인 serializer)
        5. 실행되는 기능 및 에러 처리
            1. 변수를 전달 받으나 2가지 경우로 나뉜다.
            2. 전달 받을 파일이 없는 경우==> bfile=='0' 인 경우
            3. 일반적인 sql 구문을 이용하여 테이블에 저장
            4. 전달 받을 파일이 있는 경우에는 일반적인 sql구문으로는 파일을 Django 서버에 저장할 수 없으므로
            Serializer를 이용하여 file을 받아서 정해진 경로(서버/static/)에 저장한다
            5. 저장에 성공하면 1, 문제가 발생하면 0을 전송

    4. 게시물 수정
        1. 사용하기 위한 함수 주소
            http://10.60.15.210:8000/SkdevsecBoard/change_board
        2. 반드시 받아야 하는 변수
            1. bid
            2. btitle
            3. btext
            4. bfile
            5. bview
            6. bcomment
            7. unickname
            8. bcreate_date
            9. bcate
            10. b_lock
        3. 참조하는 테이블
            skdevsec_board
        4. 사용 되는 쿼리문
            SELECT bfile FROM skdevsec_board WHERE bid='bid'
            file_serializer = SkdevsecBoardSerializer(data_check, data=new_data)
        5. 실행되는 기능 및 에러 처리
            1. 전달 받은 변수 중 bid를 이용하여 기존의 게시물 데이터를 저장
            2. 해당하는 bid에 있는 파일을 우선 삭제 (변경하든 안하든 실행)
            3. 이후 새롭게 전달받은 내용(모든 전달 변수 조건 맞춰줄 것)을 기존의 데이터에다가 갱신
            4. 성공 시 1 전송, 실패나 에러 발생 시 0 전송

    5. 게시물 삭제
        1. 사용하기 위한 함수 주소
            http://10.60.15.210:8000/SkdevsecBoard/board_delete
        2. 반드시 받아야 하는 변수
            1. bid
        3. 참조하는 테이블
            skdevsec_board
        4. 사용 되는 쿼리문
            SELECT bfile FROM skdevsec_board WHERE bid='bid'
            DELETE FROM skdevsec_board WHERE bid='bid'
        5. 실행되는 기능 및 에러 처리
            1. bid를 이용하여 해당 게시물의 파일을 확인하고 존재하면 삭제
            2. 그 후, 테이블에 저장되어 있는 게시물 정보 삭제
            3. 삭제 성공 시 1 전송, 실패하거나 에러 발생 시 0 전송

    6. 파일 삭제
        1. 사용하기 위한 함수 주소
            http://10.60.15.210:8000/SkdevsecBoard/file_delete
        2. 반드시 받아야 하는 변수
            1. bid
        3. 참조하는 테이블
            skdevsec_board
        4. 사용 되는 쿼리문
            SELECT bfile FROM skdevsec_board WHERE bid='bid'
            UPDATE skdevsec_board SET bfile=0 WHERE bid='bid'
        5. 실행되는 기능 및 에러 처리
            1. bid를 이용하여 해당 게시물의 파일을 확인하고 존재하면 삭제
            2. 그 후, 테이블에 저장되어 있는 게시물 정보 수정(bfile=0)
            3. 성공하면 1 전송, 실패하거나 에러 발생 시 0 전송

    7. 게시물 검색
        1. 사용하기 위한 함수 주소
            http://10.60.15.210:8000/SkdevsecBoard/board_search
        2. 반드시 받아야 하는 변수
            1. bcode
            2. bsearch
        3. 참조하는 테이블
            skdevsec_board
        4. 사용 되는 쿼리문
            1. 전체 검색
                SELECT bid, btitle, bfile, bview, bcomment, unickname, bcreate_date FROM skdevsec_board WHERE (btitle LIKE '%bsearch%' OR btext LIKE '%bsearch%' OR unickname LIKE '%bsearch%') AND b_lock=0
            2. 제목 검색
                SELECT bid, btitle, bfile, bview, bcomment, unickname, bcreate_date FROM skdevsec_board WHERE (btitle LIKE '%bsearch%') AND b_lock=0
            3. 내용 검색
                SELECT bid, btitle, bfile, bview, bcomment, unickname, bcreate_date FROM skdevsec_board WHERE (btext LIKE '%bsearch%') AND b_lock=0
            4. 작성자 검색
                SELECT bid, btitle, bfile, bview, bcomment, unickname, bcreate_date FROM skdevsec_board WHERE (unickname LIKE '%bsearch%') AND b_lock=0
            5. 제목+내용 검색
                SELECT bid, btitle, bfile, bview, bcomment, unickname, bcreate_date FROM skdevsec_board WHERE (btitle LIKE '%bsearch%' OR btext LIKE '%bsearch%') AND b_lock=0
        5. 실행되는 기능 및 에러 처리
            1. 우선 전달 받은 bcode를 통해 조건에 맞는 검색 sql 쿼리를 선택
            2. bsearch에 해당하는 검색 결과를 저장
            3. 데이터가 있으면 전송, 없거나 에러 발생 시 0 전송

